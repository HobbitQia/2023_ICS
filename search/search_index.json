{"config":{"lang":["ja"],"separator":"[\\s\\-\uff0c\u3002]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"\u5199\u5728\u524d\u9762","text":"<p>\u4f60\u597d\ud83d\udc4b\uff01</p> <p>\u8fd9\u91cc\u662f\u6d59\u6c5f\u5927\u5b66 2022-2023 \u77ed\u5b66\u671f\u300a\u8ba1\u7b97\u673a\u7cfb\u7edf\u6982\u8bba\u300b\u7684\u8bfe\u7a0b\u6587\u6863\u3002\u672c\u6587\u6863\u9762\u5411\u5bf9\u8c61\u4e3b\u8981\u4e3a HobbitQia \u52a9\u6559\u73ed\u4e0a\u7684\u540c\u5b66\uff0c\u5176\u4ed6\u540c\u5b66\u4e5f\u53ef\u53c2\u8003\u672c\u6587\u6863\u3002</p> <p>\u300a\u8ba1\u7b97\u673a\u7cfb\u7edf\u6982\u8bba\u300b\u4e3b\u8981\u5185\u5bb9\u662f\u4ece\u4f5c\u4e3a\u5f00\u5173\u7684\u6676\u4f53\u7ba1\u5f00\u59cb\uff0c\u5230\u6784\u5efa\u903b\u8f91\u95e8\uff0c\u518d\u5230\u66f4\u590d\u6742\u7684\u903b\u8f91\u7ed3\u6784\uff0c\u7136\u540e\u662f\u5e26\u95e8\u63a7\u7684\u9501\u5b58\u5668\uff0c\u6700\u540e\u5230\u5b58\u50a8\u5668\u7684\u5b9e\u73b0\u3002\u7136\u540e\u5b66\u4e60\u8ba1\u7b97\u673a\u7684\u6307\u4ee4\u5468\u671f\uff0c\u7279\u5b9a\u7684\u5c0f\u6559\u5b66\u6837\u673a\u8ba1\u7b97\u673a LC-3 \u7684\u5b9e\u73b0\u3002</p> <ul> <li>\u8bfe\u7a0b\u65e5\u7a0b\u8868\u53ef\u89c1 Schedule</li> <li>\u5206\u6570\u7ec4\u6210\u3001\u5b9e\u9a8c\u65e5\u5386\u3001\u6559\u5b66\u5927\u7eb2\u53ef\u89c1 Syllabus</li> <li>\u6bcf\u6b21\u5b9e\u9a8c\u8bfe\u7684 PPT \u53ef\u89c1 Resource</li> <li>\u8bfe\u7a0b\u7b14\u8bb0\u53ef\u89c1 Lecture Notes</li> <li>\u5b9e\u9a8c\u6587\u6863\u53ef\u89c1 Labs</li> </ul>"},{"location":"#_2","title":"\u66f4\u65b0\u65e5\u5fd7","text":"<p>\u8fd9\u91cc\u5c06\u8bb0\u5f55\u6700\u8fd1\u5341\u6b21\u6bd4\u8f83\u91cd\u8981\u7684\u66f4\u65b0\u3002</p> \u65f6\u95f4 \u5185\u5bb9 2023.7.13 \u66f4\u65b0\u4e86 Chapter 3 \u7684 Notes 2023.7.13 \u66f4\u65b0\u4e86 TA Session 2 \u7684 PPT 2023.7.13 \u66f4\u65b0\u4e86 Chapter 1, 2 \u7684 Notes 2023.7.12 \u66f4\u65b0\u4e86 TA Session 1 \u7684 PPT 2023.7.10 \u66f4\u65b0\u4e86\u4e3b\u9875\u7684\u5e03\u5c40\uff0c\u4fee\u6539\u4e86\u90e8\u5206\u63aa\u8f9e 2023.7.5 \u65b0\u5efa\u8bfe\u7a0b\u4e3b\u9875\uff01\u5168\u65b0\u7684\u5f00\u59cb\uff01"},{"location":"#_3","title":"\u5982\u4f55\u63d0\u5efa\u8bae","text":"<p>\u672c\u4eba\u6c34\u5e73\u6709\u9650\uff0c\u6587\u6863\u96be\u514d\u6709\u9519\u8bef\u4ee5\u53ca\u6392\u5e03\u4e0d\u5408\u7406\u4e4b\u5904\u3002</p> <p>\u5982\u679c\u4f60\uff1a</p> <ul> <li>\u53d1\u73b0\u6587\u6863\u6709\u77e5\u8bc6\u6027\u6216\u5b9e\u8df5\u6027\u7684\u9519\u8bef</li> <li>\u53d1\u73b0\u6587\u672c\u4e2d\u7684\u9519\u522b\u5b57/\u683c\u5f0f\u9519\u8bef/\u56fe\u7247\u7f3a\u5931</li> <li>\u5bf9\u6587\u6863\u6709\u5efa\u8bae</li> </ul> <p>\u6b22\u8fce\u63d0\u4ea4 Issue \u6216\u901a\u8fc7\u90ae\u7bb1\u4e0e\u6211\u6c9f\u901a\uff0c\u6211\u7684\u90ae\u7bb1\u4e3a hobbitqia@zju.edu.cn \u3002</p> <p>\u975e\u5e38\u671f\u5f85\u5f97\u5230\u4f60\u7684\u53cd\u9988\uff01</p>"},{"location":"faq/","title":"FAQ","text":"<p>\u8fd9\u91cc\u7528\u6765\u8bb0\u5f55\u4e00\u4e9b\u5e38\u89c1\u7684\u95ee\u9898\u3002</p>"},{"location":"resource/","title":"Resource","text":"<p>\u8fd9\u91cc\u7528\u6765\u53d1\u5e03\u6bcf\u8282\u5b9e\u9a8c\u8bfe\u7684 PPT\u3002</p> <ul> <li>TA Session 1 on 7.13</li> </ul> Introduction 310 KB / 10 P / 2023-07-12 <p> \u4e0b\u8f7d</p> TA Session 1 405 KB / 26 P / 2023-07-12 <p> \u4e0b\u8f7d</p> <ul> <li>TA Session 2 on 7.14</li> </ul> Introduction 1150 KB / 45 P / 2023-07-13 <p> \u4e0b\u8f7d</p>"},{"location":"schedule/","title":"Schedule","text":"<ul> <li> <p>Prof.Patt &amp; Prof.Jiang \u7406\u8bba\u8bfe\u5b89\u6392\uff1a </p> </li> <li> <p>\u5b9e\u9a8c\u8bfe\u5b89\u6392\uff1a   \u9664\u7b2c\u4e00\u5929\uff087 \u6708 11 \u65e5\uff09\u5916\uff0c\u7406\u8bba\u8bfe\u5f53\u5929\u4e0a\u5348 9:00 - 11:30 \u5747\u6709\u52a9\u6559\u4e0a\u5b9e\u9a8c\u8bfe\uff0c\u5185\u5bb9\u5305\u62ec\u4f46\u4e0d\u9650\u4e8e\u590d\u4e60\u4e0a\u8282\u8bfe\u6240\u5b66\u3001\u4f5c\u4e1a\u8bb2\u89e3\u3001\u5b9e\u9a8c\u8bb2\u89e3\u3001\u5b9e\u9a8c\u9a8c\u6536\u3002\u5b9e\u9a8c\u8bfe\u4e0d\u4f1a\u70b9\u540d\uff0c\u5176\u4e2d\u5b9e\u9a8c\u9a8c\u6536\u5fc5\u987b\u7ebf\u4e0b\u5728\u81ea\u5df1\u73ed\u7684\u52a9\u6559\u5904\u9a8c\u6536\uff0c\u5176\u4ed6\u65f6\u5019\u53ef\u4ee5\u53bb\u542c\u5176\u4ed6\u52a9\u6559\u8bb2\u8bfe\u3002\u56e0\u4e3a\u5927\u90e8\u5206\u52a9\u6559\u90fd\u662f\u7b2c\u4e00\u6b21\u8bb2\u8bfe\uff0c\u4e0d\u4e00\u5b9a\u80fd\u8bb2\u5f97\u5f88\u597d\uff0c\u4e5f\u9f13\u52b1\u5927\u5bb6\u53bb\u542c\u8bb2\u7684\u597d\u7684\u52a9\u6559\u6388\u8bfe\u3002</p> </li> </ul>"},{"location":"syllabus/","title":"Syllabus","text":""},{"location":"syllabus/#_1","title":"\u5206\u6570\u6784\u6210","text":"<ul> <li>\u671f\u672b\u8003\u8bd5\uff1a40   \u671f\u672b\u8003\u8bd5\u4f1a\u5728 2023-2024 \u79cb\u51ac\u5b66\u671f\u7b2c\u4e00\u5468\u5468\u4e94\u4e0b\u5348\u8fdb\u884c\u3002</li> <li>\u4f5c\u4e1a\uff1a20    \u4e00\u5171\u5341\u6b21\uff0c\u8fdf\u4ea4\u4f1a\u6709 penalty\u3002\u4f5c\u4e1a\u5c3d\u91cf\u5f53\u5929\u5b8c\u6210\u3002\u800c\u4e14\u4f5c\u4e1a\u6263\u7684\u5206\u53ef\u80fd\u4f1a\u6bd4\u8f83\u72e0\uff0c\u8bf7\u8ba4\u771f\u5bf9\u5f85\u3002   \u4f5c\u4e1a\u63d0\u4ea4\u622a\u6b62\u540e\u5b9e\u9a8c\u8bfe\u4f1a\u8fdb\u884c\u4f5c\u4e1a\u7684\u8bb2\u89e3\u3002</li> <li>\u5b9e\u9a8c\uff1a40</li> </ul>"},{"location":"syllabus/#_2","title":"\u5b9e\u9a8c\u65e5\u5386","text":"<p>\u8fd9\u91cc\u8d34\u4e0a\u5f80\u5e74\u7684\u5b9e\u9a8c\u65e5\u5386\u4f9b\u53c2\u8003\uff08\u4eca\u5e74\u4f1a\u6709\u6240\u4fee\u6539\uff09</p> <ul> <li>Lab1\uff1aLC-3 \u673a\u5668\u7801\u5b9e\u73b0\u7b80\u5355\u529f\u80fd</li> <li>Lab2\uff1aLC-3 \u6c47\u7f16</li> <li>Lab3\uff1a\u5b9e\u73b0\u53cc\u7aef\u961f\u5217</li> <li>Lab4\uff1a\u4e2d\u65ad</li> <li>Lab5\uff1a\u9012\u5f52</li> <li>Lab6\uff1a\u9ad8\u7ea7\u8bed\u8a00\u5b9e\u73b0 LC-3 \u6c47\u7f16\u5668 / \u6267\u884c\u5668  </li> </ul> <p>\u5b9e\u9a8c\u5206\u6570\u7531\u4e24\u90e8\u5206\u7ec4\u6210\uff1a</p> <ul> <li>\u9a8c\u6536</li> <li>\u9664\u4e86 lab6 \u4ee5\u5916\uff0c\u5747\u9700\u8981\u9a8c\u6536\uff0c\u9a8c\u6536\u5fc5\u987b\u62db\u9489\u9489\u7fa4\u5185 excel \u6587\u6863\u5206\u914d\u7684\u52a9\u6559\u3002\u9a8c\u6536\u4f1a\u5bf9\u4f60\u7684\u4ee3\u7801\u3001\u76f8\u5173\u77e5\u8bc6\u8fdb\u884c\u63d0\u95ee\uff0c\u8bf7\u52ff\u6284\u88ad\uff01\u4f1a\u6709\u67e5\u91cd\uff0c\u5982\u679c\u53d1\u73b0\u6284\u88ad\u5f53\u6b21\u5b9e\u9a8c\u8bb0 0 \u5206\uff0c\u540c\u65f6\u6700\u540e\u603b\u8bc4 -10%\u3002</li> <li>\u9a8c\u6536\u90fd\u6709\u671f\u9650\uff0c\u8d85\u8fc7\u671f\u9650\u6bcf\u5929\u4f1a\u6263\u9664 20% \u7684\u9a8c\u6536\u5206\u6570\u3002</li> <li>\u9a8c\u6536\u6700\u597d\u4e00\u6b21\u901a\u8fc7\uff0c\u5982\u679c\u7b2c\u4e00\u6b21\u6ca1\u901a\u8fc7\uff0c\u4f1a\u6263\u9664 10% \u7684\u9a8c\u6536\u5206\u6570\u3002</li> <li>lab6 \u4e0d\u9700\u8981\u9a8c\u6536\uff0c\u53ea\u9700\u8981\u5728\u5f00\u5b66\u524d\u5b8c\u6210\u5373\u53ef\u3002</li> <li>\u62a5\u544a   \u6240\u6709\u5b9e\u9a8c\u5747\u9700\u8981\u5b9e\u9a8c\u62a5\u544a\uff0c\u62a5\u544a\u8981\u6c42\u89c1\u5177\u4f53\u6587\u6863\u3002</li> </ul>"},{"location":"syllabus/#_3","title":"\u6559\u5b66\u5927\u7eb2","text":"<p>\u8fd9\u662f\u9762\u5411\u8ba1\u7b97\u673a\u5de5\u7a0b\u3001\u7535\u5b50\u5de5\u7a0b\u4e13\u4e1a\u5b66\u751f\u7684\u7b2c\u4e00\u95e8\u4e13\u4e1a\u8bfe\u7a0b\u3002\u8bfe\u7a0b\u65e8\u5728\u4e3a\u540c\u5b66\u4eec\u5b66\u4e60\u8ba1\u7b97\u673a\u79d1\u5b66\u548c\u5de5\u7a0b\u7684\u4e00\u7cfb\u5217\u540e\u7eed\u4e13\u4e1a\u8bfe\u7a0b\u6253\u4e0b\u575a\u5b9e\u7684\u57fa\u7840\u3002\u8bfe\u7a0b\u7684\u6307\u5bfc\u601d\u60f3\u662f\uff0c\u5728\u4e13\u4e1a\u6559\u80b2\u7684\u521d\u671f\u5c31\u8ba9\u5b66\u751f\u5bf9\u8ba1\u7b97\u673a\u7cfb\u7edf\u6709\u4e00\u4e2a\u8f83\u4e3a\u5b8c\u6574\u7684\u7406\u89e3\uff0c\u5bf9\u4e8e\u540e\u7eed\u7684\u8ba1\u7b97\u673a\u7ec4\u6210\u4e0e\u4f53\u7cfb\u7ed3\u6784\u3001\u64cd\u4f5c\u7cfb\u7edf\u3001\u6570\u636e\u5e93\u3001\u7f51\u7edc\u3001\u7b97\u6cd5\u8bbe\u8ba1\u4ee5\u53ca\u8f6f\u4ef6\u5de5\u7a0b\u7b49\u8bfe\u7a0b\u7684\u6df1\u5165\u7406\u89e3\u6709\u5f88\u5927\u7684\u5e2e\u52a9\u3002\u8bfe\u7a0b\u5c06\u91c7\u7528\u4e00\u79cd\u52a8\u673a\u9a71\u52a8\u7684\u81ea\u5e95\u5411\u4e0a\u7684\u6388\u8bfe\u65b9\u6cd5\uff1a\u5373\u5728\u5f15\u5165\u548c\u6982\u8981\u4ecb\u7ecd\u4e00\u4e9b\u6982\u5ff5\u53ca\u5176\u91cd\u8981\u6027\u4e4b\u540e\uff0c\u628a\u8fd9\u4e9b\u65b0\u7684\u6982\u5ff5\u4e0e\u540c\u5b66\u5df2\u7ecf\u7406\u89e3\u7684\u77e5\u8bc6\u5173\u8054\u8d77\u6765\u3002\u4ece\u4f5c\u4e3a\u5f00\u5173\u7684\u6676\u4f53\u7ba1\u5f00\u59cb\uff0c\u5230\u6784\u5efa\u903b\u8f91\u95e8\uff0c\u518d\u5230\u66f4\u590d\u6742\u7684\u903b\u8f91\u7ed3\u6784\uff0c\u7136\u540e\u662f\u5e26\u95e8\u63a7\u7684\u9501\u5b58\u5668\uff0c\u6700\u540e\u5230\u5b58\u50a8\u5668\u7684\u5b9e\u73b0\u3002\u7136\u540e\u5b66\u4e60\u8ba1\u7b97\u673a\u7684\u6307\u4ee4\u5468\u671f\uff0c\u7279\u5b9a\u7684\u5c0f\u6559\u5b66\u6837\u673a\u8ba1\u7b97\u673aLC-3\u7684\u5b9e\u73b0\u3002\u6837\u673aLC-3\u867d\u5c0f\uff0c\u4f46\u4e94\u810f\u4ff1\u5168\uff0c\u5177\u6709\u73b0\u4ee3\u5904\u7406\u5668\u7684\u91cd\u8981\u7ed3\u6784\uff0c\u540c\u65f6\u8db3\u591f\u7b80\u5355\u4ee5\u4fdd\u8bc1\u5b66\u751f\u80fd\u5b8c\u5168\u7406\u89e3\u8ba1\u7b97\u673a\u539f\u7406\u3002\u7b2c\u4e00\u6b21\u7684\u7f16\u7a0b\u4f5c\u4e1a\u662f\u5173\u4e8eLC-3\u7684\u673a\u5668\u6307\u4ee4\uff0c\u7136\u540e\u4ecb\u7ecd\u6c47\u7f16\u8bed\u8a00\u4ee5\u53ca\u6c47\u7f16\u7a0b\u5e8f\u662f\u5982\u4f55\u5de5\u4f5c\u7684\u3002\u540e\u7eed\u7684\u7f16\u7a0b\u4f5c\u4e1a\u5c06\u7528\u5230LC-3\u7684\u6c47\u7f16\u8bed\u8a00\u3002\u8bfe\u7a0b\u8fd8\u4f1a\u4ecb\u7ecd\u597d\u7684\u7f16\u7a0b\u98ce\u683c\u3001\u7a0b\u5e8f\u8c03\u8bd5\u3002\u63d0\u4f9bLC-3\u7684\u6a21\u62df\u5668\u8ba9\u5b66\u751f\u8c03\u8bd5\u3001\u6d4b\u8bd5\u81ea\u5df1\u7684\u6c47\u7f16\u7a0b\u5e8f\u3002\u7528LC-3\u6c47\u7f16\u7a0b\u5e8f\u5199\u7684\u7cfb\u7edf\u670d\u52a1\u4f8b\u7a0b\u6267\u884cI/O\u64cd\u4f5c\uff0c\u53ef\u4ee5\u5b9e\u73b0\u4ece\u952e\u76d8\u8f93\u5165\u6570\u636e\u5e76\u5728\u663e\u793a\u5668\u4e0a\u8f93\u51fa\u7ed3\u679c\u3002\u7528\u6237\u7a0b\u5e8f\u901a\u8fc7\u81ea\u9677\uff08Trap\uff09\u6307\u4ee4\u548c\u81ea\u9677\u5411\u91cf\u8c03\u7528\u670d\u52a1\u4f8b\u7a0b\u3002\u6700\u540e\u52a0\u5165\u5b50\u7a0b\u5e8f\u8c03\u7528\u548c\u8fd4\u56de\u6307\u4ee4\u4f7f\u5f97LC-3\u7684\u6307\u4ee4\u7cfb\u7edf\u662f\u4e00\u4e2a\u5b8c\u5907\u7684\u6307\u4ee4\u7cfb\u7edf\u3002</p>"},{"location":"note/","title":"Lecture Notes","text":"<p>\u7b14\u8bb0\u5185\u5bb9\u5927\u591a\u6765\u81ea\u5f80\u5e74\u52a9\u6559\u7684\u8bb2\u89e3\uff0c\u4ee5\u53ca\u6559\u6750\u4e66\u4e0a\u5185\u5bb9\u7684\u8282\u9009\uff0c\u4ec5\u4f9b\u53c2\u8003\u3002</p> <p>\u6bcf\u7ae0\u7684\u7b14\u8bb0\u4f1a\u5728\u52a9\u6559\u8bfe\u7ed3\u675f\u540e\u53d1\u5e03\u3002</p> <ul> <li>Chapter 1: Welcome Abroad \u5728\u7ebf\u7b14\u8bb0/pdf \u7248\u7b14\u8bb0</li> <li>Chapter 2: Bits, Data Types and Operations \u5728\u7ebf\u7b14\u8bb0/pdf \u7248\u7b14\u8bb0</li> <li>Chapter 3: Digital Logic Structures \u5728\u7ebf\u7b14\u8bb0/pdf \u7248\u7b14\u8bb0</li> <li>Chapter 4: The von-Neumann Model \u5728\u7ebf\u7b14\u8bb0/pdf \u7248\u7b14\u8bb0</li> <li>Chapter 5: The LC-3 \u5728\u7ebf\u7b14\u8bb0/pdf \u7248\u7b14\u8bb0</li> <li>Chapter 6: Programming in LC-3 Assembly \u5728\u7ebf\u7b14\u8bb0/pdf \u7248\u7b14\u8bb0</li> <li>Chapter 7: Assembly Language \u5728\u7ebf\u7b14\u8bb0/pdf \u7248\u7b14\u8bb0</li> <li>Chapter 8: Data Structures \u5728\u7ebf\u7b14\u8bb0/pdf \u7248\u7b14\u8bb0</li> <li>Chapter 8: I/O \u5728\u7ebf\u7b14\u8bb0/pdf \u7248\u7b14\u8bb0</li> </ul>"},{"location":"note/chap01/","title":"Welcome Aboard","text":"Chapter 1 319 KB / 4 P / 2023-07-13 <p> \u4e0b\u8f7d</p>"},{"location":"note/chap01/#overview","title":"Overview","text":"<p>This is the first chapter of this book. In this chapter, we will introduce the ultimate goal of this lecture. You will learn some basic ideas of computer science. We will start at the foundation, and go on to add layer after layer, as we get closer and closer to what most people know as a full-blown computer.  </p>"},{"location":"note/chap01/#two-major-themes-abstraction-hardware-vs-software","title":"Two major themes: abstraction &amp; hardware vs. software","text":""},{"location":"note/chap01/#abstraction","title":"Abstraction","text":"<p>Abstraction is a technique for establish a simpler way for a person to interact with a system. Keep only the necessary part and omit the unnecessary details for people to interact. </p> <p>Example</p> <p>\u6c7d\u8f66\u5b9e\u9645\u4e0a\u5c31\u662f\u4e00\u79cd\u62bd\u8c61\uff0c\u9a7e\u9a76\u5458\u5f00\u8f66\u7684\u65f6\u5019\uff0c\u53ea\u9700\u8981\u77e5\u9053\u5982\u4f55\u64cd\u4f5c\u6c7d\u8f66\uff0c\u800c\u4e0d\u9700\u8981\u77e5\u9053\u6c7d\u8f66\u662f\u7531\u4ec0\u4e48\u6784\u6210\u7684\uff0c\u4ec0\u4e48\u9a71\u52a8\u7684\u6c7d\u8f66\u884c\u9a76\u7b49\u4e00\u7cfb\u5217\u7ec6\u8282\u4e0a\u7684\u95ee\u9898\u3002</p> <p>Abstraction help us deal with all kinds of situations more efficiently. One can be effective without understanding what is below the abstraction as long as everything goes well.   </p> <p>However, there is an assumption for abstraction that everything about detail is just fine. If something went wrong in details, we need to go back to its real stuff. </p>"},{"location":"note/chap01/#hardware-vs-software","title":"Hardware vs. Software","text":"<p>Hardware generally means the physical computer and all the specifications associated with it. Software generally means the programs(like operating systems or application programs). </p> <p>As we mentioned above, the charm of abstraction allows us to operate at a level without thinking about other layers. If you work at a higher level, it could be better if you understand the how does it work in lower level. By doing this, one can be able to a much better job. Thus, we urge you to take the approach that hardware and software are names for components of two parts of a computing system that work best when they are designed by people who take into account the capabilities and limitations of both.</p> <p>Info</p> <p>\u5982\u679c\u8f6f\u4ef6\u5f00\u53d1\u4eba\u5458\u77e5\u9053\u4ed6\u4eec\u6240\u7528\u7684\u673a\u5668\u7684\u80fd\u529b\u3001\u5c40\u9650\u6027\u7b49\u65b9\u9762\u7684\u77e5\u8bc6\uff0c\u4ed6\u4eec\u80fd\u591f\u56e0\u6b64\u8bbe\u8ba1\u51fa\u66f4\u9002\u5408\u4e8e\u8fd9\u53f0\u673a\u5668\u7684\u8f6f\u4ef6\u3002</p>"},{"location":"note/chap01/#computer-system","title":"Computer System","text":"<p>A computer system is a combination of software and hardware. The software directs and specifies the processing of information. The hardware performs the actual processing of information that the software asks the hardware to do. A more precise term of this hardware is a Central Processing Unit(CPU), or simply a processor or a microprocessor. </p>"},{"location":"note/chap01/#the-parts-of-a-computer-system","title":"The Parts of a Computer System","text":"<p>Today, computer system is often a laptop with many additional devices rather than just a CPU. A computer system generally includes the processor, a key-board, a mouse, a monitor, a memory for temporarily storing information, disks and USB memory sticks. There are also some connections to other devices such as printer.</p>"},{"location":"note/chap01/#two-very-important-ideas","title":"Two Very Important Ideas","text":"<ul> <li>All computers (the biggest or the slowest) are capable of computing same things if they are given enough time.</li> <li>We need to transform the problem into program language and then transform into the voltage that can move the electrons.</li> </ul>"},{"location":"note/chap01/#how-do-we-get-the-electrons-to-do-the-work","title":"How Do We Get the Electrons to Do the Work?","text":"Problem(Natural language) Algorithm (eliminate ambiguity) Program (Python, C++, ...) Instruction set architecture(ISA)(\u6307\u4ee4\u96c6\u67b6\u6784) Micro-architecture(\u5fae\u67b6\u6784) Logic circuit Electronic circuit Electrons <p>The table above shows the process we must go through to get the electrons (which actually do the work) to do our bidding. </p>"},{"location":"note/chap01/#problem-statement","title":"Problem Statement","text":"<p>We describe our problems in \"natural language\"(such as Chinese, English...). But computer can not accept natural languages since natural languages are ambiguous(\u6709\u6b67\u4e49\u7684). The electrons can only do as it is told, telling them something that are multiple interpretations would cause the computer to not know what to do.</p>"},{"location":"note/chap01/#the-algorithm","title":"The Algorithm","text":"<p>In this case, our first step is to translate the natural language into algorithm that do not have ambiguity. An algorithm is a step-by-step procedure that is guaranteed to terminate, such that each step is precisely stated and can be carried out by the computer.   </p> <p>There are some terms to describe the properties of algorithm:</p> <ul> <li>definiteness: each step is precisely stated. It should not contain some notions that are not precise</li> <li>effective computability: each step can be carried out by a computer. This means, a procedure should be computable for a computer.</li> <li>finiteness: the procedure can terminates.</li> </ul>"},{"location":"note/chap01/#the-program","title":"The program","text":"<p>Our next step is to transform algorithm into programming language. Programming language is designed for use in specifying a sequence of instructions to a computer. Of course, programming languages are unambiguous.</p>"},{"location":"note/chap01/#the-isa","title":"The ISA","text":"<p>The next step is to translate the program into the instruction set of the particular computer that will be used to carry out the work of the program. The ISA of a computer specifies the interface between the computer program directing the computer hardware and the hardware carrying out those directions. </p> <p>Example</p> <p>\u6c7d\u8f66\u7684 ISA \u5c31\u662f\u4eba\u9700\u8981\u77e5\u9053\u4ed6\u80fd\u8ba9\u8f66\u505a\u4ec0\u4e48\uff0c\u4ee5\u53ca\u8f66\u9700\u8981\u505a\u5230\u4eba\u6307\u5b9a\u7684\u4efb\u52a1\u7684\u89c4\u8303\u3002 \u5bf9\u4e8e\u4e00\u8f86\u8f66\u7684\u8e0f\u677f\uff0c\u4eba\u77e5\u9053\u5982\u679c\u4ed6\u8e29\u4e0b\u53bb\uff0c\u90a3\u4e48\u8fd9\u8f86\u8f66\u4f1a\u5239\u8f66\u3002\u8f66\u77e5\u9053\u5982\u679c\u8e0f\u677f\u53d7\u5230\u4e86\u538b\u529b\uff0c\u8f66\u7684\u786c\u4ef6\u4f1a\u8ba9\u8f66\u505c\u4e0b\u3002ISA \u7684\u4f5c\u7528\u5c31\u662f\u5c06\u4eba\u8e29\u5239\u8f66\u548c\u8f66\u505c\u4e0b\u5bf9\u5e94\u8d77\u6765\u3002</p> <p>It is the definition that makes what 0s and 1s means. </p> <p>The ISA of computers specify opcodes, data types, addressing modes, the number of unique locations, the number of individual 0s and 1s. The number of those can vary among different ISAs.</p> <p>We need a compiler (\u7f16\u8bd1\u5668) to translate a high-level language to the low-level language that the computer supports. We need an assembler to translate the unique assembly language of a computer to binary code. </p>"},{"location":"note/chap01/#the-microarchitecture","title":"The Microarchitecture","text":"<p>The next step is the implementation of the ISA, referred to as its microarchitecture.</p> <p>\u5982\u4f55\u7406\u89e3 Microarchitecture (\u5fae\u67b6\u6784)?</p> <p>\u4f60\u53ef\u4ee5\u5c06\u5176\u7406\u89e3\u4e3a\u5982\u4f55\u6839\u636e\u6307\u5b9a\u7684 ISA \u8bbe\u8ba1\u67b6\u6784\uff0c\u4f7f\u5f97\u8ba1\u7b97\u673a\u80fd\u591f\u8fd0\u884c\u8be5 ISA \u4e0b\u7684\u6307\u4ee4\u3002\u56e0\u6b64\uff0c\u4e00\u4e2a ISA \u53ef\u4ee5\u6709\u591a\u4e2a\u5fae\u67b6\u6784\uff0c\u4f46\u662f\u4e00\u822c\u4e00\u4e2a\u5fae\u67b6\u6784\u53ea\u80fd\u5bf9\u5e94\u4e00\u4e2a ISA. </p> <p>Example</p> <p>\u6240\u6709\u7684\u6c7d\u8f66\u90fd\u6709\u76f8\u540c\u7684 ISA\uff0c\u4f8b\u5982\u6240\u6709\u7684\u6c7d\u8f66\u4e2d\u4e09\u4e2a\u8e0f\u677f\u7684\u5b9a\u4e49\u5b8c\u5168\u76f8\u540c\uff0c\u5373\u4e2d\u95f4\u7684\u662f\u5239\u8f66\u3001\u53f3\u8fb9\u7684\u662f\u6cb9\u95e8\u3001\u5de6\u8fb9\u7684\u662f\u79bb\u5408\u5668\u3002 \u800c\u5c06 ISA \u5b9e\u73b0\u7684\u5177\u4f53\u7ec4\u7ec7\uff08\u5fae\u7ed3\u6784\uff09\u662f\u6307\u8f66\u76d6\u677f\u4e0b\u7684\u201c\u5185\u5bb9\u201d\u3002\u6240\u6709\u7684\u6c7d\u8f66\uff0c\u5176\u5236\u9020\u548c\u6a21\u578b\u90fd\u4e0d\u5c3d\u76f8\u540c\uff0c\u8fd9\u53d6\u51b3\u4e8e\u8bbe\u8ba1\u8005\u5728\u5236\u9020\u4e4b\u524d\u6240\u505a\u7684\u6743\u8861\u51b3\u7b56\uff0c\u5982\u6709\u7684\u5236\u52a8\u7cfb\u7edf\u91c7\u7528\u5239\u8f66\u7247\uff0c\u6709\u7684\u91c7\u7528\u5236\u52a8\u9f13\uff1b\u6709\u7684\u662f\u516b\u7f38\u53d1\u52a8\u673a\uff0c\u6709\u7684\u662f\u516d\u7f38\uff0c\u8fd8\u6709\u7684\u662f\u56db\u7f38\uff1b\u6709\u7684\u6709\u6da1\u8f6e\u589e\u538b\uff0c\u6709\u7684\u6ca1\u6709\u3002\u6211\u4eec\u79f0\u8fd9\u4e9b\u5dee\u5f02\u6027\u7684\u7ec6\u8282\u4e3a\u4e00\u4e2a\u7279\u5b9a\u6c7d\u8f66\u7684\u201c\u5fae\u7ed3\u6784\u201d\uff0c\u5b83\u4eec\u53cd\u6620\u4e86\u8bbe\u8ba1\u8005\u5728\u6210\u672c\u548c\u6027\u80fd\u4e4b\u95f4\u6240\u505a\u7684\u6743\u8861\u51b3\u7b56\u3002</p>"},{"location":"note/chap02/","title":"Bits, Data Types, and Operations","text":"Chapter 2 338 KB / 6 P / 2023-07-13 <p> \u4e0b\u8f7d</p>"},{"location":"note/chap02/#overview","title":"Overview","text":"<p>In this chapter, we will introduce the concept of bits. You will learn how to represent numbers and do some operations on that using bits.</p>"},{"location":"note/chap02/#bits-and-data-type","title":"Bits and Data Type","text":""},{"location":"note/chap02/#bits","title":"Bits","text":"<p>Computers solve problems using moving electrons. Inside the computer,millions of tiny devices react to the presence or absence of voltages and thus control the moving of electrons. We simply use the presence of voltage as \"1\" and absence as \"0\". We refer to each 0 and 1 as bit </p>"},{"location":"note/chap02/#data-type","title":"Data Type","text":"<p>Bits can represent data.  </p> <p>Bits are just bits. Two same sequence of bits can represent different values.  </p> <p>Some data types:  </p> <ul> <li>Unsigned int: the range of a \\(k\\) digits number is [\\(0\\),\\(2^k-1\\)]</li> <li>Signed int: the range of a k digits number is [\\(-2^{k-1}\\),\\(2^{k-1}-1\\)]</li> <li>Logical variable</li> <li>Float</li> <li>ASCLL</li> </ul>"},{"location":"note/chap02/#integer-data-type","title":"Integer Data Type","text":""},{"location":"note/chap02/#unsigned-integers","title":"Unsigned Integers","text":"<p>Represent the unsigned integers using bits.  </p> <p>Recall the representation of decimal integers:  </p> \\[ 629=6*10^2+2*10^1+9*10^0 \\] <p>Representing integers using bits is similar. Here, the base is 2, rather than 10 since one bits can only represent two different values. For example:  </p> \\[ 10_{d}=1010_b=1*2^3+0*2^2+1*2^1+0*2^0 \\]"},{"location":"note/chap02/#signed-integers","title":"Signed Integers","text":"<p>We will introduce 3 representations of signed integers.  </p>"},{"location":"note/chap02/#sign-magnitude","title":"Sign-Magnitude","text":"<p>A straightforward representation is as follow: Let the highest leading bit as the sign bit. A leading 0 signifies a positive integer and a leading 1 signifies negative integer.  </p> <p>Example</p> <p>+10 is represented as 01010. In the sign-magnitude representation, -10 is represented as 11010 with the highest bit changes to 1 which signifies the negative.  </p>"},{"location":"note/chap02/#1s-complement","title":"1's Complement","text":"<p>Flipping all bits of an positive integer to form a 1's complement negative integer.  </p> <p>Example</p> <p>+10 is represented as 01010. In the 1's complement representation, -10 is represented as 10101.</p>"},{"location":"note/chap02/#2s-complement","title":"2's Complement","text":"<p>Both of the two representations of signed integers need unnecessary hardware to do addition. In order to simplify the circuit, 2's complement representation is chosen to used on almost every computer today.  </p>"},{"location":"note/chap02/#how-to-construct","title":"How to construct?","text":"<p>Flipping all the bits of an positive integer and then add 1 to form a 2's complement negative integer.  </p> <p>Example</p> <p>+10 is represented as 01010. In the 1's complement representation, -10 is represented as 10110. </p>"},{"location":"note/chap02/#conversion-between-binary-and-decimal","title":"Conversion between Binary and Decimal","text":"<p>Since 2's complement is the most widely used representation, here we just consider convert 2's complement type integer. And for simplicity, we assume our number is represented in eight bits.  </p>"},{"location":"note/chap02/#binary-to-decimal","title":"Binary to Decimal","text":"<p>The procedure is in page 31  </p> <p>Recall the formal of an 2's complement integer:</p> \\[ b_7\\ b_6\\ b_5\\ b_4\\ b_3\\ b_2\\ b_1\\ b_0 \\] <p>The conversion procedure is as follow:  </p> <ol> <li> <p>Examine the leading bit \\(b_7\\). If it is 0, go to step 2, otherwise, obtain the 2's complement positive integer with same magnitude first(flipping all the bits and adding 1).</p> </li> <li> <p>Calculate magnitude: \\(b_6*2^6+b_5*2^5+b_4*2^4+b_3*2^3+b_2*2^2+b_1*2^1+b_0*2^0\\)    In this way can we obtain the decimal magnitude.</p> </li> <li> <p>Determine its sign. If the original number is negative, then just add a minus sign</p> </li> </ol>"},{"location":"note/chap02/#decimal-to-binary","title":"Decimal to Binary","text":"<p>The main idea is to divide the decimal integer by 2, and check its remainder until the dividend is 0.  </p> <p>The detailed procedure is in page 32-33</p>"},{"location":"note/chap02/#convert-numbers-with-fractional-parts","title":"Convert Numbers with Fractional Parts","text":""},{"location":"note/chap02/#binary-to-decimal_1","title":"Binary to Decimal","text":"<p>Binary decimal: \\(0.b_{-1}b_{-2}b_{-3}b_{-4}\\). Similar to convert integers</p>"},{"location":"note/chap02/#decimal-to-binary_1","title":"Decimal to Binary","text":"<p>The main idea is to multiply the fractional parts by two. If the result is greater than 1, than put a 1 in the binary result, otherwise put a 0. </p> <p>Note that it may take infinite steps to convert the precise fractional numbers.  </p> <p>The detailed procedure is in Page 34</p>"},{"location":"note/chap02/#operations-on-bits-arithmetic","title":"Operations on Bits: Arithmetic","text":""},{"location":"note/chap02/#addition-and-subtraction","title":"Addition and Subtraction","text":"<p>Addition rules still proceeds from right to left, one digit at a time. Subtraction can be transfer to addition(i.e., A-B is simply A+(-B).).  </p>"},{"location":"note/chap02/#sign-extension","title":"Sign Extension","text":"<p>It's efficient to represent small number with fewer bits. However, sometimes we need to extend the bits to do some operations. The value after extension should not change. In order to maintain their original value when extending, we should follow the rules below. </p> <p>For positive numbers, just add 0 to its higher bits.</p> <p>For negative numbers, just add 1 to its higher bits. </p>"},{"location":"note/chap02/#overflow","title":"Overflow","text":"<p>Here we assume numbers are all in five-bit 2's complement form, which can represent integers from -16 to +15.</p> <p>If two numbers are big enough, the result of addition would exceed the maximal number that five-bit 2's complement integer can represent. In this way, an overflow occurs.</p> <p>Example</p> <p>\\((9+11)_d\\Leftrightarrow 01001_b+01011_b=10100_b=-12_d\\)    An overflow occurs. </p> <p>\u5982\u4f55\u5224\u65ad\u4ec0\u4e48\u65f6\u5019\u4ea7\u751f\u6ea2\u51fa\uff1f</p> <ol> <li>\u6b63\u6570+\u6b63\u6570=\u8d1f\u6570  </li> <li>\u8d1f\u6570+\u8d1f\u6570=\u6b63\u6570 \u6ce8\u610f\u6b63\u6570\u548c\u8d1f\u6570\u76f8\u52a0\u6c38\u8fdc\u90fd\u4e0d\u4f1a\u6ea2\u51fa</li> </ol>"},{"location":"note/chap02/#operations-on-bits-logical-operations","title":"Operations on Bits: Logical Operations","text":"<p>Logical operations operate on logical variables. An logical variable can have one of two values 0 and 1.</p>"},{"location":"note/chap02/#truth-table","title":"Truth table","text":"<p>Truth table is a tabular listing of the values of a function for all possible combinations of values on its arguments  </p> <p>We will show different logical operations via truth table.</p>"},{"location":"note/chap02/#and","title":"AND","text":"<p>Representation: \\(A\\cdot B\\)</p> A B AND 0 0 0 0 1 0 1 0 0 1 1 1"},{"location":"note/chap02/#or","title":"OR","text":"<p>Representation: \\(A+B\\)</p> A B AND 0 0 0 0 1 1 1 0 1 1 1 1"},{"location":"note/chap02/#not","title":"NOT","text":"<p>Representation: \\(\\bar A\\)</p> A NOT 0 1 1 0"},{"location":"note/chap02/#xor","title":"XOR","text":"<p>Representation: \\(A\\oplus B\\)</p> A B AND 0 0 0 0 1 1 1 0 1 1 1 0"},{"location":"note/chap02/#demorgans-laws","title":"DeMorgan's Laws","text":"\\[ \\overline{\\bar A\\cdot\\bar B} = A+B \\] <p>It's easy to proof this law by filling in the truth table.</p>"},{"location":"note/chap02/#float-point-type","title":"Float Point Type","text":"<p>If we represent fractional numbers using the way in 2.4.3, it would take more bits to represent a number which is costly. Thus, we introduce a more efficient way to represent fractional numbers.  </p> <p>IEEE floating point numbers:  </p> <p>IEEE floating point do not use all bits to represent the precision, instead, it allocate some bits to the range of this value. In this case, we can express larger range of values.</p> <p>Below is the 32-bit IEEE floating point data type.  </p> <p></p> <ul> <li>Normalized Form : \\((-1)^{s}\\times1.fraction\\times2^{exp-bias}\\) </li> </ul> <p>Where bias = 127 in 32-bit data type, bias = 1023 in 64-bit data type.</p> <p>Note that the range of \\(exp\\) is 1-254. \\(exp=1\\) and \\(exp=255\\) is used for other forms. </p> <ul> <li>Subnormal Form: can represent small numbers than the normalized form. Here exp = 0. The form is: \\((-1)^{s}\\times1.fraction\\times2^{1-bias}\\)</li> <li>Infinities: exp = 255. </li> <li>Zero: all bits are assigned to 0.</li> <li>Other combination of fraction and exponent are all illegal.</li> </ul> <p>The 64-bit IEEE floating point data type is similar to 32-bit one. The difference is 64-bit numbers have 11 bits to represent exponent and 52 bits to represent fraction.</p> <p></p>"},{"location":"note/chap02/#ascii","title":"ASCII","text":"<p>ASCII stands for America Standard Code for Information Interchange. It is used to represent characters. Each character has its own 8-bit binary digits representation. The entire set of eight-bit ASCII code is listed in Appendix E.</p>"},{"location":"note/chap02/#hexadecimal-notation","title":"Hexadecimal Notation","text":"<p>Hexadecimal notation provides us more convenience way to read binary string contains just 0 and 1. </p> <p>The main idea is to think each of the four bits as a unsigned integer and transfer four bits into corresponding hexadecimal number. </p> <p>Example</p> <p>We have a binary string:  0011110101101110 We firstly break the string at 4-bit boundaries: 0011    1101    0110    1110 And then convert each 4-bit string to its hex digit:  3  D  6  E</p>"},{"location":"note/chap03/","title":"Digital Logic Structures","text":"Chapter 3 1169 KB / 19 P / 2023-07-14 <p> \u4e0b\u8f7d</p> <p>Abstract</p> <ul> <li>Transistors</li> <li>Logic Gates<ul> <li>NOT</li> <li>NOR &amp; OR</li> <li>NAND &amp; AND</li> </ul> </li> <li>Combinational Logic Circuits<ul> <li>Decoder</li> <li>Multiplexer</li> <li>Adder</li> <li>PLA</li> </ul> </li> <li>Sequential Logic Circuits<ul> <li>Basic Storage Elements (Latch)</li> <li>Sequential Logic Circuits Design (FSM)</li> <li>Advanced Storage Elements (Flip-Flop)</li> </ul> </li> <li>Memory<ul> <li>Address Space</li> <li>Addressability</li> </ul> </li> </ul>"},{"location":"note/chap03/#transistors","title":"Transistors","text":"<p>MOS Transistors are below the lowest level of abstraction, so we don't need to care about how they are constructed and how they work, we just need to use it to build logic gates.</p> <ul> <li>NMOS(N-type MOS) When NMOS is supplied with high volts, the gate acts like a wire, and drain and source are connected(short circuit). When NMOS is supplied with low volts, the connection between drain and source is broken(open circuit).</li> </ul> <ul> <li>PMOS(P-type MOS)  The act of PMOS is exactly the opposite fashion from NMOS. High volts lead to disconnection while low volts lead to connection.</li> </ul> <p>It's worth noting that whether in PMOS or NMOS there is a drain and a source, specifying the direction of the current and it can only flow from source to drain and the position of drain and source can't exchange.</p>"},{"location":"note/chap03/#logic-gates","title":"Logic Gates","text":"<p>Now, we can build common logic gates based on P-type and N-type MOS transistors.  </p> <p>In the parts below, we use 1.2V for high volts while 0V for low volts.</p>"},{"location":"note/chap03/#not","title":"NOT","text":"<p>The NOT gate is also called inverter and its use to negate the input. e.g. If the input is 1.2V then the output is 0V and vice versa.  </p> <p>The construction of the NOT gate is as followed:</p>"},{"location":"note/chap03/#nor-or","title":"NOR &amp; OR","text":"<p>The NOR gate and the OR gate act like logical functions NOR and OR. You can turn to chapter 2 to review its behavior and truth table.</p> <p>Here is one kind of construction of NOR gate:</p> <p>Based on the NOR gate above, we can add an inverter to the output of the NOR gate then we can obatain a construction of the OR gate.</p> <p>Someone may wonder why we only exchange gates above and below the output and when building the OR gate, like this:</p> <p>This implementation breaks the rule that the position of source and the drain can not exchange. Thus there may be some transmission loss of voltage. (If interested, you can search for reasons on the Internet. Actually it's not what we should care about as a CS student.) Therefore, in practice we still use 6 transistors to build a AND gate.</p>"},{"location":"note/chap03/#nand-and","title":"NAND &amp; AND","text":"<p>The NAND gate and the AND gate act like logical functions NAND and OR. You can turn to chapter 2 to review its behavior and truth table.</p> <p>Here is a construction of the NAND and AND gate:  </p>"},{"location":"note/chap03/#summary-of-logic-gates","title":"Summary of Logic Gates","text":"<p>So far, we have learned how to construct common logic gates, which means we now stand on a higher abstraction level, from transistors to logic gates. In following content, we don't need to care about the concrete construction of gates, thus we use some symbols to represent them.</p> <p>It's worth noting that a hollow circle means \"NOT\". e.g. You can easily find the NAND gate is the AND gate plus a hollow circle on its output. Actully, input can also be inverted, so a hollow circle can also be used on input ports.</p> <p>Besides, when there are more than 2 inputs, we also represent it as the gate with 2 inputs.</p> <p>A 3-input AND gate</p> <p></p> <p>Although we may be more familiar with AND, OR and NOT, the universal gates are NAND or NOR. (reasons in Part 3.5)</p>"},{"location":"note/chap03/#combinational-logic-circuits","title":"Combinational Logic Circuits","text":"<p>There are fundamentally 2 kinds of logic structures, combinational and sequential. The difference between them is whether they can store information in the circuit or not.</p> <p>In this part we talk about combinational logic circuits. The characteristic of it is that we can immediately determine outputs with inputs provided and outputs are not dependent on any past history of circuits at all. </p> <p>Before we enter the main part, please be clear that if there is only a wire without number, then the wire only carries 1-bit data. If there is a wire with a number \\(n\\), then the wire carries \\(n\\)-bit data. </p> <p>Here we talk about 3 common combinational logic circuits: Decoder, Mux and Adder.</p>"},{"location":"note/chap03/#decoder","title":"Decoder","text":"<p>A decoder has \\(n\\) inputs and \\(2^n\\) outputs and only one of its outputs is 1 and all the rest are 0s.  </p> <p>Note that the inverter can also be added to the input port of AND gates, so 2-4 decoder can be constructed like this:</p>"},{"location":"note/chap03/#multiplexer","title":"Multiplexer","text":"<p>The function of a multiplexer (mux for abbreviation) is to select one of the inputs and connect it to the output. The select signal determines which input is connected to the output.</p> <p>2-to-1 Mux</p> <p></p> <p>You can easily find that \\(A\\) will be outputed when \\(S=0\\) otherwise \\(B\\) will be outputed. And it can be writed as a symbol like this:  </p> <p>In general, a mux consists of \\(2^n\\) inputs, \\(n\\) select lines (can also be writed as 1 line with \\(n\\) bits) and 1 output.</p> <p>Example</p> <p></p>"},{"location":"note/chap03/#adder","title":"Adder","text":"<p>First we consider a truth table of 1-bit binary addition. We use \\(A_i, B_i\\) for the \\(i\\)-th bit of \\(A, B\\), the sum bit \\(S_i\\) for the \\(i\\)-th bit of the result and the carry bit \\(C_{i+1}\\). (\\(C_i\\) is the carry bit from the previous addition, \\(C_{i+1}\\) is the carry bit for the next addtion)  </p> \\(A_i\\) \\(B_i\\) \\(C_i\\) \\(C_{i+1}\\) \\(S_i\\) 0 0 0 0 0 0 0 1 0 1 0 1 0 0 1 0 1 1 1 0 1 0 0 0 1 1 0 1 1 0 1 1 0 1 0 1 1 1 1 1 <p>Here is a logic gate implementation of a 1-bit adder.  </p> <p>We can build a circuit for adding two 4-bit binary numbers using 1-bit adders.</p> <p>In the diagram above, the rightmost one is a half adder while the other are full adders. The difference between them is the carry bit. In the half adder \\(C_i\\) is default to 0 while in the full adder \\(C_i\\) might be 1 from previous addition.</p>"},{"location":"note/chap03/#pla","title":"PLA","text":"<p>PLA (Programmable logic array) consists of an array of AND gates followed by an array of OR gates. </p> <p>The common form of PLA is like this: </p> <p>Suppose there are \\(n\\) logical variables (i.e. inputs) and we want to implement \\(m\\) logical functions(i.e. outputs). For each function, we can write the truth table for it and find combinations of variables that can make the functions output 1. e.g. For \\(W=A\\cdot B\\cdot C\\), only when \\(A=1,B=1,C=1\\) that we have \\(W=1\\). </p> <p>In PLA, we first use a decoder to get variable combination, then connect the correspounding combination of input variables to each output OR gate.  </p>"},{"location":"note/chap03/#logical-completeness","title":"Logical Completeness","text":"<p>We say PLA has the property logical completeness since it can express any logic function. In PLA, we only use AND, OR and NOT gates, which means {AND, OR, NOT} is logical complete.  </p> <p>Remind that we say NAND gates are universal, which means NAND is also logical complete. NOR is the same. The proof is left for readers to verify.</p>"},{"location":"note/chap03/#sequential-logic-circuits","title":"Sequential Logic Circuits","text":"<p>In this part we talk about sequential logic circuits. The characteristic of it is that they contain store elements to keep track of prior history information.  </p> <p>So in this part we first dicuss how to store information in circuits, then we talk about how to design sequential logic circuits.</p>"},{"location":"note/chap03/#basic-storage-elements","title":"Basic Storage Elements","text":""},{"location":"note/chap03/#r-s-latch","title":"R-S Latch","text":"<p>The R-S latch can store 1 bit of information. It has two inputs \\(R\\) and \\(S\\) and two outputs \\(a\\) (We say this port is \\(Q\\)) and \\(b\\) (We say this port is \\(\\overline{Q}\\)). </p> <p>Since we define one port is \\(Q\\) and the other is \\(\\overline{Q}\\), we can easily find that \\(a=\\overline{b}\\) and \\(b=\\overline{a}\\).</p> <p>The work process is as followed:</p> <ul> <li>At beginning suppose \\(S=R=1\\), the latch is in chaos, we cannot know the value of \\(a, b\\). </li> <li>If we want to set (i.e. store 1) the latch.   We change \\(S\\) from 1 to 0, then \\(a\\) becomes 1 and \\(b\\) becomes 0. After that we change \\(S\\) back to 1, now \\(S=R=1\\) but the stored value will not change, which means we successfully store 1 into the latch.</li> <li>If we want to reset (i.e. store 0) the lach. We change \\(R\\) from 1 to 0, then \\(b\\) becomes 1 and \\(a\\) becomes 0. After that we change \\(R\\) back to 1, now \\(S=R=1\\) but the stored value will not change, which means we successfully store 0 into the latch.</li> </ul> <p>Note that </p> <ul> <li>In the field of digital logic circuit, set means 1 for output while reset means 0.  </li> <li>We describe the quiescent state (or quiet) of a latch as the state when the latch is storing a value, either 0 or 1. This is the case when inputs \\(S=R=1\\).</li> <li>If \\(S=R=0\\) then \\(a=b=1\\), disobeying the rule that \\(a=\\overline b\\). So in practice we don't allow this input occurs.</li> </ul> <p>The table below can summarize the process of the latch</p> \\(S\\) \\(R\\) \\(a(Q)\\) \\(b(\\overline Q)\\) 1 1 ? ? Unknown 0 1 1 0 Set 1 1 1 0 The latch \"remenber\" the value 1 0 0 1 Reset 1 1 0 1 The latch \"remenber\" the value 0 0 1 1 Both go to high 1 1 ? ? Unknown"},{"location":"note/chap03/#gated-d-latch","title":"Gated D Latch","text":"<p>To be useful, it is necessary to control when a latch is set and when it is cleared. The gated D latch is a simple way to do this. </p> <p>In the diagram, \\(D\\) is the value that we want to store into the latch. \\(WE\\) stands for write enable.</p> <ul> <li>\\(WE\\) is asserted (\\(WE=1\\), can write) <ul> <li>\\(D=1\\), then \\(S=0,R=1\\), 1 is stored. </li> <li>\\(D=0\\), then \\(S=1,R=0\\), 0 is stored. Thus, we can think that the Gated D Latch store the value of \\(D\\).</li> </ul> </li> <li>\\(WE\\) is not asserted (\\(WE=0\\), only read)<ul> <li>\\(R=S=1\\), so whether \\(D\\) is 0 or 1 it cannot change the stored value.</li> </ul> </li> </ul>"},{"location":"note/chap03/#sequential-logic-circuits-design","title":"Sequential Logic Circuits Design","text":""},{"location":"note/chap03/#finite-state-machine","title":"Finite State Machine","text":"<ul> <li>The state of a system is a snapshot of all the relevant elements of the system at the moment the snapshot is taken.<ul> <li>current state/next state</li> </ul> </li> <li>Sequential are used to implement a very important class of mechanisms called finite state machines (FSM for abbreviation). A finite state machine contains:<ul> <li>A finite number of states.</li> <li>A finite number of external inputs.</li> <li>A finite number of external outputs.</li> <li>An explicit specification of all state transitions.</li> <li>An explicit specification of what determines each external output value.</li> </ul> </li> <li>The sequential circuit function can be represented in graphical form as a state diagram with the following components:<ul> <li>A circle with the state name in it for each state</li> <li>A directed arc from the Present State to the Next State for each state transition</li> <li>A label on each directed arc with the Input values which causes the state transition, and a label:<ul> <li>On each circle with the output value produced, or</li> <li>On each directed arc with the output value produced.</li> </ul> </li> </ul> </li> </ul> <p>Example of FSM</p> <p></p> <p>There are 5 lights. At beginning, all lights are off. When the switch is in the ON position, the controller directs the lights as follows: During one unit of time, all lights will be off. In the next unit of time, lights 1 and 2 will be on. The next unit of time, lights 1, 2, 3, and 4 will be on. Then all five lights will be on. Then the sequence repeats: no lights on, followed by 1 and 2 on, followed by 1, 2, 3, and 4 on, and so forth. Each unit of time lasts one second. </p> <ul> <li> <p>We can draw the state diagram for the example like this:      </p> </li> <li> <p>We can obtain the sequential logic circuit from the state diagram:      </p> <p>Here Storage Element 1 stores the high bit of the state name while Storage Element 2 stores the low bit.</p> </li> <li> <p>We can obtain combinational logic circuit from the state diagram. The state transistion can be identified by the truth table.  Here we use \\(A(t)\\) for Storage Element 1, \\(B(t)\\) for Storage Element 2 at time \\(t\\). \\(A(t+1), B(t+1)\\) for time \\(t+1\\).</p> \\(A(t)\\) \\(B(t)\\) \\(A(t+1)\\) \\(B(t+1)\\) 0 0 0 1 0 1 1 0 1 0 1 1 1 1 0 0 <p>So we can get the combinational circuit like this: </p> </li> </ul> <p>You can turn to textbooks for more examples of FSM.</p>"},{"location":"note/chap03/#advanced-storage-elements","title":"Advanced Storage Elements","text":"<p>In the previous example, there is a question: The process is so fast that the input of next cyle will be the output of the last cycle almost immediately. So we have no idea what the state of the finite state machine woule be for the next clock cycle.</p> <p>Actually, latches are asynchronous since if the external input changes, the stored value and the output will immediate change as well. </p> <p>However, in practice, we usually use synchronous circuits. That is, a circuit with a clock. The clock signal alternates at a fixed time and the each of the repeated sequence of identical intervals is referred to as a clock cycle. </p> <p>FSM can only make 1 state transition each clock cycle. </p> <p>Therefore, we need advanced storage elements to implement synchronous storage that is, Flip-Flop.</p>"},{"location":"note/chap03/#master-slave-flip-flop","title":"Master-Slave Flip-Flop","text":"<p>A Master-Slave Flip-Flop is implemented by 2 Gated D Latch. Clock signal acts as WE signal. The right part is called slave while the left part is called master.</p> <ul> <li>In the first half A (i.e. \\(Clock=WE=1\\)), the slave read the value from the master and update the value by combinational circuits (\\(Q\\)) while the master remain the same.</li> <li>In the second half B (i.e. \\(Clock=WE=0\\)), the value updated by combinational circuit is stored in master while the slave remain the same.</li> <li>Timing diagram  <ul> <li>the slave load the value from the master.</li> <li>the combinational logic finishes its update/calculation(proper delay). So it enters the next cycle.</li> <li>the master load the updated value, so it also enters the next value.</li> <li>repeat 1</li> </ul> </li> </ul>"},{"location":"note/chap03/#memory","title":"Memory","text":"<p>Memory is made up of a number of locations, each uniquely identifiable and each having the ability to store a value.  </p>"},{"location":"note/chap03/#address-space","title":"Address Space","text":"<p>We refer to the unique identifier associated with each memory location as its address.</p> <p>We refer to the total number of uniquely identifiable locations as the memory\u2019s address space.  </p>"},{"location":"note/chap03/#addessability","title":"Addessability","text":"<p>We refer to the number of bits of information stored in each location as its addressability.</p> <p>For \\(2^n\\)-by-\\(m\\)-bit memory, its address space is  \\(2^n\\) while its addressability is \\(m\\).</p> <p>Example</p> <p>\u5047\u8bbe\u7389\u6e56\u4e03\u5e62 6 \u697c\u4e3a\u4e00\u5757\u5185\u5b58\uff0c\u5176\u4e2d\u8fd9\u4e00\u697c\u4e00\u5171\u6709 20 \u95f4\u5bdd\u5ba4\uff0c\u8fd9\u5c31\u662f\u5185\u5b58\u7a7a\u95f4\u3002\uff08\u56e0\u4e3a\u6bcf\u95f4\u5bdd\u5ba4\u90fd\u6709\u72ec\u4e00\u65e0\u4e8c\u7684\u5bdd\u5ba4\u53f7\uff09 \u800c\u6bcf\u95f4\u5bdd\u5ba4\u90fd\u662f\u56db\u4eba\u95f4\uff0c\u56e0\u6b64\u53ef\u5bfb\u5740\u80fd\u529b\u662f 4\uff0c\u8868\u793a\u6700\u5c0f\u7684\u5bfb\u5740\u5355\u5143\u3002</p> <p>\\(2^2\\)-by-3-bit Memory</p> <p></p> <ul> <li>\\(A[1:0]\\) is the address. So there are at most 4 locations that can store values. Given an address, decoder will tell us which location that we can access.</li> <li>Since each location has 3 flip-flops, we can store 3 bits in a location, which implies the addressability is 3 bit.</li> <li>\\(WE=0\\) is for reading data. \\(D[i]\\) is the \\(i\\)-th bit result. Here we use a mux to select which bit is from the address that we access. </li> <li>\\(WE=1\\) is for writing data. \\(D_i[2:0]\\) is the data that we will write into memory. Meanwhile, the reading result \\(D[2:0]\\) will also have outputs.</li> </ul>"}]}